package binarySearchTree;

public class ClosestNeighbor {
	public static void main(String[] args) {
		MyBST bstObj = new MyBST();
		String inputStr = "958 4425 9632 4131 3906 6689 3013 4934 5048 588 7628 2796 9737 8114 6974 4896 4147 3369 6601 3088 1381 2432 474 2903 2748 8328 3553 2444 2173 500 4909 9483 4925 892 3613 8830 7581 6625 116 2628 3565 4095 1775 9653 8560 5100 4548 2706 4820 7500 2146 6200 9931 2619 5454 9031 7298 9007 7826 9470 9506 9086 5304 782 9978 8917 9612 7558 1893 6079 6537 1809 173 8311 7813 8732 3410 2360 7790 8229 6212 6287 780 2494 5257 6233 7876 2554 1591 5702 8375 7449 1139 3679 8230 1116 8947 4193 5025 7191 271 1561 5352 6795 9871 3164 1879 9632 5524 9668 7860 8087 2306 4991 580 7562 1224 4808 115 9166 509 8489 6614 7999 8519 1196 9115 7465 5388 491 1008 2011 2052 6359 5157 8274 9522 7035 7906 1397 3054 2117 9483 5359 7108 6415 2920 4683 1222 3034 3848 8082 7875 6814 6080 6393 8009 1546 210 9748 8389 1217 1758 440 7575 3267 5065 7096 301 9322 8493 3355 7791 4327 8713 1250 741 1633 5932 8314 1018 6131 2747 8892 2944 5179 1637 952 6724 8198 7052 1464 9414 5161 8255 6988 8427 3320 435 8728 8993 5279 8434 6783 9606 7146 8032 6698 5130 315 5012 2500 6446 7758 7743 9389 9288 9379 6693 2364 7576 3744 3827 3341 5256 2082 6680 3683 5401 7115 2410 4393 2393 843 7528 1998 4340 1911 8696 9470 2226 59 8321 8671 4168 6063 4411 3456 5442 7455 5819 9369 7550 9645 2710 2806 1726 5741 6488 3478 2855 5249 4223 5248 2443 8102 3597 6782 12 8644 2603 2237 5054 923 7259 9222 6986 1670 9029 8779 5476 1199 4499 3026 843 3560 2183 8921 9301 8670 8750 2155 3918 9324 3754 2712 7425 3703 9493 7437 8698 8448 6025 3752 9370 3284 9325 2707 4953 4705 7837 6780 5903 2336 9805 3097 2247 1987 8369 1547 7008 3471 54 7277 2794 159 9988 6571 3861 5833 4007 8911 4280 6383 9014 3649 9666 8338 2708 970 9394 544 7750 5296 2879 7554 4744 5126 5893 3113 3024 9252 6583 3077 6529 5728 9588 6516 2298 3448 8700 2656 8710 2979 9039 7723 6628 8704 2412 5687 9674 1805 6230 3775 7100 5461 7680 1844 6938 3572 1308 9961 9176 4242 9390 5704 9969 8977 8571 8619 8776 7271 1274 7486 249 6664 1560 3228 1720 3972 5266 7745 5776 1496 1519 9228 3308 9198 7423 245 9122 5082 6557 8297 9323 5946 352 9291 1274 8922 7909 50 2544 5535 3887 2793 2198 1798 2372 3917 5769 7638 1661 7897 5485 3179 3476 8792 8729 7250 9036 7850 2331 1944 2498 1653 4242 2849 7295 5515 1770 1556 1916 666 7090 2154 9810 5639 3952 2181 9556 6072 6170 7568 3968";
		String[] split = inputStr.split(" ");
		for (String string : split) {
			bstObj.insert(Integer.parseInt(string));
		}
		/*MyBST bstObj = new MyBST();
		bstObj.insert(5);
		bstObj.insert(2);
		bstObj.insert(1);
		bstObj.insert(3);
		bstObj.insert(12);
		bstObj.insert(9);
		bstObj.insert(21);
		bstObj.insert(19);
		bstObj.insert(25);*/
		
		ClosestNeighbor obj = new ClosestNeighbor();
		int key = 1653, res = -1;
		res = obj.getClosestNeighbor(bstObj.root, key, res);
		System.out.println(res);
	}

	private int getClosestNeighbor(MyBSTNode root, int key, int res) {
		if (root == null)
			return res;
		if (key < root.data) {
			return getClosestNeighbor(root.left, key, res);
		}
		res = root.data; // If key Equal or greater than root, update res.
		if (key > root.data) {
			return getClosestNeighbor(root.right, key, res);
		}
		return res;
	}
}
